#include "MK64F12.h"

void Port_set(void);
void PORTB_IRQHandler(void);
void LED_set(int x, int y);
void delay_ms(int n);

int main(void) {
	Port_set();
	
	int j,k;
	k = 0;
	while (1){
		int i = 1;
		if ((PTB -> PDIR & 0x08) == 0){         /* check whether SW1 (PTB3) is pressed */
			PTA -> PDDR |= 0x02;                /* buzzer on */
			while (1){
				if (i != 5){
					 LED_set(1, i);
                     delay_ms(500);
					 LED_set(0, i);
                i++;}
				else{
					i = 1;
				}
			}
		}	
		
		if ((PTB -> PDIR & 0x0800) == 0 ){      /* check whether SW3 (PTB11) is pressed */
			PTD -> PDDR |= (1 << 1);            /* D1 PTD1 on*/                                                                                                                                                                                      
			PTD -> PDDR |= (1 << 3);            /* D2 PTD3 on*/
			PTD -> PDDR |= (1 << 2);            /* D3 PTD2 on*/
			PTD -> PDDR |= (1 << 0);            /* D4 PTD0 on*/
			delay_ms(500);
			SysTick->LOAD = 0x20480 - 1;        /* initial SYST_RVR = 1387999 ( 1 sec )  */
			SysTick->CTRL = 5 ;                 /* initial SYST_CLR     - enable 
                                                                        - no interrupt 
                                                                        - clock source */                
			
			while((PTB -> PDIR & 0x0800) != 0 ){            /* wait until SW3 (PTB11) is pressed again   */
				while((SysTick->CTRL & 0x10000) == 0){      /* count flag is set every 0.1 sec */ 
				}
				k++;                                        /* time passed k * 1 sec. */
			}
			SysTick->CTRL = 0;                              /* stop Systick timer */

			for(j=0; j<(k/100); j++){
				PTD -> PDDR |= (1 << 1) | (1 << 3) | (1 << 2) | (1 << 0);           /* D1-4 PTD1 on */
				PTA -> PDDR |= 0x02;                                                /* buzzer on */
				delay_ms(500);
				PTD -> PDDR &= ~(1 << 1) & ~(1 << 3) & ~(1 << 2) & ~(1 << 0);       /* D1-4 PTD1 off */
				PTA -> PDDR &= ~0x02;                                               /* buzzer off */
				delay_ms(500);
			}
			k=0;
		}
	}
}


void Port_set(void) {
    SIM -> SCGC5 |= (1 << SIM_SCGC5_PORTA_SHIFT) | (1 << SIM_SCGC5_PORTB_SHIFT) | (1 << SIM_SCGC5_PORTD_SHIFT) ;
    PORTB -> PCR[3] = 1 << PORT_PCR_MUX_SHIFT;                          /* make PTB3 pin as GPIO */
    PORTB -> PCR[10] = 1 << PORT_PCR_MUX_SHIFT;                         /* make PTB10 pin as GPIO */
		PORTB -> PCR[11] = 1 << PORT_PCR_MUX_SHIFT;                         /* make PTB11 pin as GPIO */
    PORTA -> PCR[1] = 1 << PORT_PCR_MUX_SHIFT;                          /* make PTA1 pin as GPIO */
		PORTD -> PCR[1] = 1 << PORT_PCR_MUX_SHIFT;                          /* make PTD1 pin as GPIO */
		PORTD -> PCR[3] = 1 << PORT_PCR_MUX_SHIFT;                          /* make PTD3 pin as GPIO */
		PORTD -> PCR[2] = 1 << PORT_PCR_MUX_SHIFT;                          /* make PTD2 pin as GPIO */
		PORTD -> PCR[0] = 1 << PORT_PCR_MUX_SHIFT;                          /* make PTD0 pin as GPIO */

		/* Interrupt PTB10 SW2 */
        __disable_irq();                    /* disable all IRQs */
        PORTB->PCR[10] &= ~0xF0000;         /* clear interrupt selection */
        PORTB->PCR[10] |= 0x90000;          /* enable Rising-edge interrupt */
        NVIC->ISER[1] |= 0x10000000;        /* enable interrupt for PORTB at NVIC 60 % 32 = 28 */
        __enable_irq();                     /* global enable IRQS */
				
}


/* Interrupt sw2 */
void PORTB_IRQHandler(void){
				{
				PTA -> PDDR &= ~(0x02);      /* buzzer turn on */
                delay_ms(100);
				}
		PORTB -> ISFR = 0x00000010;          /* clear intterrupt flag */
}

   

void LED_set(int x, int y) {
        PORTD -> PCR[0] = 1 << PORT_PCR_MUX_SHIFT;
        PORTD -> PCR[1] = 1 << PORT_PCR_MUX_SHIFT;
        PORTD -> PCR[2] = 1 << PORT_PCR_MUX_SHIFT;
        PORTD -> PCR[3] = 1 << PORT_PCR_MUX_SHIFT;
        switch (y) {
        case 1:
                /* D1 PTD1 */
                if (x == 1) {
                        PTD -> PDDR |= (1 << 1);
                } else {
                        PTD -> PDDR &= ~(1 << 1);
                }
                break;
        case 2:
                /* D2 PTD3 */
                if (x == 1) {
                        PTD -> PDDR |= (1 << 3);
                } else {
                        PTD -> PDDR &= ~(1 << 3);
                }
                break;
        case 3:
                /* D3 PTD2*/
                if (x == 1) {
                        PTD -> PDDR |= (1 << 2);

                } else {
                        PTD -> PDDR &= ~(1 << 2);
                }
                break;
        case 4:
                /* D4 PTD0 */
                if (x == 1) {
                        PTD -> PDDR |= (1 << 0);
                } else {
                        PTD -> PDDR &= ~(1 << 0);
                }
                break;
        }

}

void delay_ms(int n) {
        int i;
        SysTick -> LOAD = 20480 - 1;   /* 1 ms */
        SysTick -> CTRL = 5;
        for (i = 0; i < n; i++)
                while ((SysTick -> CTRL & 0x10000) == 0) {}         /* wait until the count flag is set */
        SysTick -> CTRL = 0;                                        /* Stop the timer Enable = 0*/
}
